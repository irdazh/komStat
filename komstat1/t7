fCoba = function(x0, mu){
   x1 = x0 - (x0^2-mu)/(2*x0)
   x1
}

fCoba(1, 4)

fCoba2 = function(x0, mu, eps=10^-4, iter = 10){
   i = 1
   repeat {
      x1 = x0 - (x0^2-mu)/(2*x0)
      cat("iterasi ke-", i, " = ", x1, "\n", sep="")

      #break
      if (abs(x1-x0)<eps | i>=iter) {break}
      i = i+1
      x0 = x1}
      
   cat("Salah satu akar dari", mu,"adalah", x1, "\n")
}
 
fCoba2(-1,4)
fCoba2(1,-8)
8^0.5
# for one x, multiple function 

fCoba3 = function(x0, mu, eps=10^-4, iter = 10){
   k = length(x0)
   i = 1
   repeat {
      x1 = x0 - (x0^2-mu)/(2*x0)
      cat("iterasi ke-", i, " = [ ", paste(signif(x1,4), by=" ", sep=""), "]\n", sep="")

      #break
      if ( sum(abs(x1-x0)<eps) == k | i>=iter) {break}
      i = i+1
      x0 = x1}
      
   cat("Salah satu akar dari [", mu,"] adalah [", signif(x1,4), "] \n")
}

fCoba3(c(-1,1,3,4), c(4,4,9,9))

# fungsi pangkat 3
fCoba4 = function(x0, mu, eps=10^-4, iter = 10){
   k = length(x0)
   i = 1
   repeat {
      x1 = x0 - (x0^3-mu)/(3*x0^2)
      cat("iterasi ke-", i, " = [ ", paste(signif(x1,4), by=" ", sep=""), "]\n", sep="")

      #break
      if ( sum(abs(x1-x0)<eps) == k | i>=iter) {break}
      i = i+1
      x0 = x1
      }
   cat("Salah satu akar pangkat tiga dari [", mu,"] adalah [", signif(x1,4), "] \n")
}

fCoba4(c(-1,1,3,-2), c(8,4,9,27))



# Newton Raphson for both multivar.
# Constrained Opt.

fCoba5 = function (mX, mu=7, eps = 10^-4, iter=40){
    
    # function
    f1 = function(x) x[1]^2 + 4*x[2]^2 - 2*x[1] + 8*x[2]
    f2 = function(x, mu=7) x[1] + 2*x[2] - mu

    f1x1 = function (x) 2*x[1] - 2
    f1x2 = function (x) 8*x[2] + 8
    f2x1 = function (x) 1
    f2x2 = function (x) 2
        
    i = 1
    # matrices
    repeat {
        mF = matrix(c(f1(mX), f2(mX)), ncol=1, byrow=T)
        m0 = c(0, 0)

        mJ =  matrix( c(f1x1(mX), f1x2(mX), f2x1(mX), f2x2(mX)),
                                nrow=2, byrow=T)
        mXf = mX - solve(mJ) %*% mF
        cat("iterasi ke-", i, " = [ ", paste(signif(mXf,1), by=" ", sep=""), "]\n", sep="")
        
        # break
        if ( sum(abs(mXf - mX)<eps) == 2 | i>=iter) {break}
        i = i+1
        mX = mXf
    }
    cat("Salah satu optimasi tiga dari [", mu,"] adalah [", signif(mXf,4), "] \n")
}

fCoba5(c(4, 0))


# BATAS SUCI
fCoba6 = function (mX, mu1=4, mu2=3, eps = 10^-4, iter=40){

    # function
    f1 = function(x, mu=mu1) x[1] + x[1]*x[2] - mu
    f2 = function(x, mu=mu2) x[1] + x[2] - mu

    f1x1 = function (x) 1 + x[2]
    f1x2 = function (x) x[1]
    f2x1 = function (x) 1
    f2x2 = function (x) 1
    
    i = 1
    # matrices
    repeat {
        mF = matrix(c(f1(mX), f2(mX)), ncol=1, byrow=T)
        m0 = c(0, 0)

        mJ =  matrix( c(f1x1(mX), f1x2(mX), f2x1(mX), f2x2(mX)),
                                nrow=2, byrow=T)
        mXf = mX - solve(mJ) %*% mF
        cat("iterasi ke-", i, " = [ ", paste(signif(mXf,14), by=" ", sep=""), "]\n", sep="")
        
        # break
        if ( sum(abs(mXf - mX) < eps) == 2 || i>=iter) {break}
        i = i+1
        mX = mXf
    }
    cat("Salah satu akar dari { x1 + x1*x2 =", mu1,"} dan {x1 + x2  =", mu2, 
    "} adalah [", signif(mXf,3), "] \n")
}

fCoba6(c(3, 3))


# BATAS SUCI
fCoba7 = function (mX, mu1=4, mu2=4, eps = 10^-4, iter=40){

    # function
    f1 = function (x, mu=mu1) 2*x^2 - mu
    f2 = function (x, mu=mu2) 2*x^3 - mu
    df = function (x) 6*x^2 - 4*x
    
    # 1. f2-f1 = 0
    # 2. 
    
    i = 1
    # matrices
    repeat {      
        mXf = mX - (f2(mX) - f1(mX))/(df(mX))
        cat("iterasi ke-", i, " = [ ", paste(signif(mXf, 6), by=" ", sep=""), "]\n", sep="")
        
        # break
        if ( abs(mXf - mX) < eps || i>=iter) {break}
        i = i+1
        mX = mXf
    }
    cat("Salah satu akar dari { 2x^2 =", mu1,"} dan { 2x^3  =", mu2, 
    "} adalah [", signif(mXf,3), "] \n")
}

fCoba7(8)



















