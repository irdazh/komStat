# num. 1: forecasting ts ----------------------------------------------------------------

#read data 
tsdata=read.csv(file="data/no1uts.csv")
View(head(tsdata))

fTS = function(data, MAperiod=5, DMAperiod=3, alpha=0.5, gamma=0.1, 
               method = c("DMA", "Holt", "Brown")){
  
  #fungsi tiap metode
  fDMA =
    function(x=data[,2], N=MAperiod, M=DMAperiod){
      #initialization
      A=B=s1=s2=df= rep(NA, length(x))
      
      
      #loop for s2 (s") and s1 (s')
      for (t in N:length(x)){
        s1[t] = sum(x[t:(t-N+1)])/N
        
        if (t >= M+N-1) s2[t] = sum(s1[t:(t-M+1)])/M
        
        #input A and B non cap
        A[t] = 2*s1[t]-s2[t]
        B[t] = 2/(N-1)*(s1[t]-s2[t])
        
        #input df
        df[t+1] = A[t]+B[t]
      }
      return(df)
    }
  
  fHolt = 
    function(x=data[,2], a=alpha, g=gamma){
      #initialization
      b = s = rep(0,length(x))
      s[1] = x[1]
      b[1] = x[2] - x[1]
      
      #loop for s and b
      for (t in 2:length(x)){
        s[t] = a*x[t] + (1-a)*(s[t-1]+b[t-1])
        b[t] = g*(s[t]-s[t-1]) + (1-g)*b[t-1]
      }
      
      #df for f
      df = c(NA, s+b)
      return(df)
    }
  
  fBrown = 
    function(x=data[,2], a=alpha){
      #initialization
      s2 = s1 = rep(0,length(x))
      s2[1] = s1[1] = x[1]
      
      #loop for s2 (s") and s1 (s')
      for (t in 2:length(x)){
        s1[t] = a*x[t] + (1-a)*s1[t-1]
        s2[t] = a*s1[t] + (1-a)*s2[t-1]
      }
      
      #input a and b (non cap)
      A = 2*s1-s2
      B = a/(1-a)*(s1-s2)
      
      #df for f
      df = c(NA, A+B)
      return(df)
    }
  
  
  #fungsi gak penting
  rerata = function(x){
    x = na.omit(x)
    return(sum(x)/length(x))
  }
  mutlak = function(x){
    return(ifelse(x>0, x, -x))
  }
  
  #print keterangan awal
  cat("Peramalan Data",
      "\nMetode", method)
  
  if (method=="DMA"){
    dff = fDMA()
    cat("\nMA Period:", MAperiod,
        "\nDMA Period:", DMAperiod)
    
  } else if (method=="Holt"){
    dff = fHolt()
    cat("\nAlpha:", alpha,
        "\nGamma:", gamma)
    
  } else if (method=="Brown"){
    dff = fBrown()
    cat("\nAlpha:", alpha)
  }
  
  
  #akurasi peramalan
  diff = dff[-length(dff)]-data[,2]
  mae = rerata(mutlak(diff))
  mse = rerata(diff^2)
  rmse = mse^0.5
  mape = rerata(mutlak(diff/data[,2]))*100
  
  #print nilai
  cat("\n----------------------------",
      "\nPeramalan 1 waktu ke depan:", dff[length(dff)],
      "\nMAE:", mae, 
      "\nMSE:", mse,
      "\nRMSE:", rmse,
      "\nMAPE:", mape)
  
  #print plot
  dfplot =
    plot(data[,1], data[,2], type="l", col="blue", 
         ylab="Stock Price", xlab="Index", 
         main=paste("Metode", method))
    lines(dff, col="red")
    legend("topleft", title="Keterangan",
         legend = c("Data Asli", "Data Ramalan"),
         fill = c("blue", "red"), cex=0.6
  )
  cat(dfplot)
  
}

# uji coba ofkors
fTS(data = tsdata, method = "DMA")
fTS(data = tsdata, method = "Holt")
fTS(data = tsdata, method = "Brown")

# Nomor 2 -----------------------------------------------------------------

passcheck = function(password){
  
  # ascii code thingy
  kap = 65:90
  non = 97:122
  ang = 48:57
  sim = c(33,35,36,38,94,95)
  val = c(kap, non, ang, sim)
  
  # read unsafe pw
  unsafe = read.delim("data/no2uts.txt",header = F)
  
  pw = password
  x = utf8ToInt(pw)
  
  #syarat rendah
  r1 = sum(x %in% val) >= 8
  
  #syarat sedang
  s2 = sum(x %in% val) >= 10
  s3 = sum(x %in% ang) >= 1
  s4 = sum(x %in% kap) >= 1
  s5 = sum(x %in% non) >= 1
  s6 = sum(x %in% sim) >= 1
  
  #syarat tinggi
  t2 = sum(x %in% val) >= 12
  t3 = sum(pw == unsafe) == 0
  
  k = if (s2+s3+s4+s5+s6==5){
    if (t2&t3) "tinggi"
    else "sedang"
  } else if (r1) "rendah" else "tidak_valid"
  
  return(k)
  
}

#Jalankan syntax di bawah setelah fungsi selesai dibuat, kemudian lampirkan file OUTPUT_NIU.csv.
list_password = c('KOMSTAT', 'PenjagaJanji', '1Januari1980', 'jessica123', 'tikusbertopi45', 'FireFox!123', 'cleop4tr4', 'citrusjuice', 'muhammadtahta', 'Alex44T0x',
                  'andoconnect', 'GLORYGLORYMANUNITED!!!', '44+66=100', 'Lorem Ipsum', 'emyu_10hag', 'kursiGoyangkakekku', 'RubYMonsTer9', 'asal_ikut', 'symph0ny@museum', '109690101010',
                  'rubikCubeSpeed', 'MOMGETtheCAMERA!!!!1!', 'KLouisss5', 'iLovePDF.jpg', 'rumble_rac3R', 'dan1p2k3', 'koMstAt_LanJuT%', 'lesparedes', 'HeadsetG@m1ng', 'LCar-9', '1,1,1,1',
                  'Y0zjhF!j&0)', 'SeeeeN0#o13', 'thelegendofR', 'Gambar3Dimen$i', 'kriptonium_', 'Helsinki-rac3r', 'PunyaPacr', 'passsword', 'carla18cardy', 'Boiling_Wat@r', 'trustw0rThy')
result = c()
for (i in list_password){
  result = c(result, passcheck(i)) 
}
df = data.frame('password' = list_password, 'result' = result)
df

write.csv(df, 'OUTPUT_474059.csv')

table(df$result)

# Nomor 3: Logo IHMSI -----------------------------------------------------

lebar = 7; jarak = 8
x1=x2=y1=y2 = NULL

for (i in 0:4){ #buat y deh
  m = -19.5
  for (j in 0:4){ #buat x inside i as y
    x1[5*i+j+1] = m+jarak*j
    x2[5*i+j+1] = m+jarak*j+lebar
    y1[5*i+j+1] = m+jarak*i
    y2[5*i+j+1] = m+jarak*i+lebar
  }
}

wlogo = "#642e6a"

plot(c(-30,30), c(-30,30), type="n", xlab="", ylab="", main="Ini Logo IHMSI")
rect(x1,y1,x2,y2, col="#C3C7F0", lwd=2, border="#C3C7F0")

ofs=1.2
rect(x1+ofs,y1+ofs,x2-ofs,y2-ofs, col="white", lwd=0, border="#C3C7F0")

#abline(v=c(x1,20))
xp1 = c(-9.5, -17, -8, 1, -8, -17)
yp1 = c(0, -16.5, -16.5, 0, 16.5, 16.5)

xp2 = c(-6, 17, 17, 10, -2)
yp2 = c(16.5, 16.5, 9, 12, 9)

polygon(x=xp1, y=yp1, col = wlogo, lwd=2)
polygon(x=xp2, y=yp2, col = wlogo, lwd=2)
polygon(x=xp2, y=-yp2, col = wlogo, lwd=2)

# Nomor 4: Uwuwuuw --------------------------------------------------------

#fungsi jarak
jarak = function(m1, m2, p) {
  apply(abs(m1-m2)^p, 1, sum)^(1/p)
}

#read data and matrix
df4 = scan(text="
159    176    168    171    174    172    180    176    164    170    169    183    155    159    177    181    179    163    165    167
81    76    60    55    68    73    84    91    75    87    57 56    59    78    88    86    83    53    63    82")

mt4 = matrix(c(df4, rep(1, 20)), ncol=3, byrow=F)
mt4

#k_medoid func
#medoid sy ubh utk memudahkan perhitungan eak
kMedoid = function(data, medoid=c(140,40,190,80),
                   distance=c("Euclidian", "Manhattan"),
                   iterations=5){
  
  pK = ifelse(substr(distance,1,3)=="Euc", 2, 1)
  
  for (i in 1:iterations){
    
    medoid = matrix(rep(medoid, 20), ncol=4, byrow=T)
    dis1 = jarak(data[,1:2], medoid[,1:2], p=pK)
    dis2 = jarak(data[,1:2], medoid[,3:4], p=pK)
    
    data[,3] = ifelse(dis1>dis2, 2, 1)
    
    #medoid: med1tb, med2tb
    medoid = c(
      apply(data[data[,3]==1, 1:2], 2, median),
      apply(data[data[,3]==2, 1:2], 2, median)
    )
  }
  cat("K-Medoid Clustering \nDistance yang digunakan:",
      distance, "\nIterasi:", iterations,
      "\nBuat 2 cluster dengan medoid masing-masing cluster:",
      "\n  Medoid CLuster 1:", medoid[1:2],
      "\n  Medoid CLuster 2:", medoid[3:4],
      "\nData hasil clustering:\n")
  print(data) #langsung print
  
  war = c("green", "blue")
  pl = #bikin plot
    plot(data[,1], data[,2], pch=20, col=war[data[,3]],
         xlab="Tinggi Badan", ylab="Berat Badan",
         main=paste(distance, iterations, "Iterasi"))
  legend("topleft", title="Keterangan",
         legend = c("Cluster 1", "Cluster 2", "Medioid"),
         col = c(war, "tomato"), cex=0.5,
         y.intersp = 0.7, pch=c(20,20,4), pt.cex = 0.8)
  points(medoid[c(1,3)], medoid[c(2,4)], pch=4,
         col=war)
  
  print(pl)
  #return(data) #kembaliin data if u want eak
}

kMedoid(mt4, distance = "Manhattan", iter=1)
kMedoid(mt4, distance = "Manhattan", iter=2)
kMedoid(mt4, distance = "Manhattan", iter=5)

kMedoid(mt4, medoid = c(150,80, 195,80),
        distance = "Manhattan", iter=5)




